{"ast":null,"code":"import { useDebugValue } from 'react';\nimport './SystemContext.js';\nimport { useToken } from './useToken.js';\nimport { _ as _objectSpread2 } from './_rollupPluginBabelHelpers-0c84a174.js';\n/**\n * React custom hook that returns the options returned by a given\n * `use${name}Options` in the SystemContext.\n *\n * @example\n * import React from \"react\";\n * import { SystemProvider, useOptions } from \"reakit-system\";\n *\n * const system = {\n *   useAOptions(options, htmlProps) {\n *     return {\n *       ...options,\n *       url: htmlProps.href,\n *     };\n *   },\n * };\n *\n * function A({ url, ...htmlProps }) {\n *   const options = useOptions(\"A\", { url }, htmlProps);\n *   return <a href={options.url} {...htmlProps} />;\n * }\n *\n * function App() {\n *   return (\n *     <SystemProvider unstable_system={system}>\n *       <A href=\"url\">\n *         It will convert href into url in useAOptions and then url into href in A\n *       </A>\n *     </SystemProvider>\n *   );\n * }\n */\n\nfunction useOptions(name, options, htmlProps) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (htmlProps === void 0) {\n    htmlProps = {};\n  }\n\n  var hookName = \"use\" + name + \"Options\";\n  useDebugValue(hookName);\n  var useHook = useToken(hookName);\n\n  if (useHook) {\n    return _objectSpread2(_objectSpread2({}, options), useHook(options, htmlProps));\n  }\n\n  return options;\n}\n\nexport { useOptions };","map":{"version":3,"sources":["/home/priya/Desktop/reactCheckboxTask/React_checkbox_task/node_modules/reakit-system/es/useOptions.js"],"names":["useDebugValue","useToken","_","_objectSpread2","useOptions","name","options","htmlProps","hookName","useHook"],"mappings":"AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,OAAO,oBAAP;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,CAAC,IAAIC,cAAd,QAAoC,yCAApC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,OAA1B,EAAmCC,SAAnC,EAA8C;AAC5C,MAAID,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,MAAIC,SAAS,KAAK,KAAK,CAAvB,EAA0B;AACxBA,IAAAA,SAAS,GAAG,EAAZ;AACD;;AAED,MAAIC,QAAQ,GAAG,QAAQH,IAAR,GAAe,SAA9B;AACAL,EAAAA,aAAa,CAACQ,QAAD,CAAb;AACA,MAAIC,OAAO,GAAGR,QAAQ,CAACO,QAAD,CAAtB;;AAEA,MAAIC,OAAJ,EAAa;AACX,WAAON,cAAc,CAACA,cAAc,CAAC,EAAD,EAAKG,OAAL,CAAf,EAA8BG,OAAO,CAACH,OAAD,EAAUC,SAAV,CAArC,CAArB;AACD;;AAED,SAAOD,OAAP;AACD;;AAED,SAASF,UAAT","sourcesContent":["import { useDebugValue } from 'react';\nimport './SystemContext.js';\nimport { useToken } from './useToken.js';\nimport { _ as _objectSpread2 } from './_rollupPluginBabelHelpers-0c84a174.js';\n\n/**\n * React custom hook that returns the options returned by a given\n * `use${name}Options` in the SystemContext.\n *\n * @example\n * import React from \"react\";\n * import { SystemProvider, useOptions } from \"reakit-system\";\n *\n * const system = {\n *   useAOptions(options, htmlProps) {\n *     return {\n *       ...options,\n *       url: htmlProps.href,\n *     };\n *   },\n * };\n *\n * function A({ url, ...htmlProps }) {\n *   const options = useOptions(\"A\", { url }, htmlProps);\n *   return <a href={options.url} {...htmlProps} />;\n * }\n *\n * function App() {\n *   return (\n *     <SystemProvider unstable_system={system}>\n *       <A href=\"url\">\n *         It will convert href into url in useAOptions and then url into href in A\n *       </A>\n *     </SystemProvider>\n *   );\n * }\n */\n\nfunction useOptions(name, options, htmlProps) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (htmlProps === void 0) {\n    htmlProps = {};\n  }\n\n  var hookName = \"use\" + name + \"Options\";\n  useDebugValue(hookName);\n  var useHook = useToken(hookName);\n\n  if (useHook) {\n    return _objectSpread2(_objectSpread2({}, options), useHook(options, htmlProps));\n  }\n\n  return options;\n}\n\nexport { useOptions };\n"]},"metadata":{},"sourceType":"module"}