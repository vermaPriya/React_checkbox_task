{"ast":null,"code":"import 'reakit-utils/flatten';\nimport { warning } from './warning.js';\nimport { useEffect } from 'react';\nimport { isObject } from 'reakit-utils/isObject';\n\nfunction isRefObject(ref) {\n  return isObject(ref) && \"current\" in ref;\n}\n/**\n * Logs `messages` to the console using `console.warn` based on a `condition`.\n * This should be used inside components.\n */\n\n\nfunction useWarning(condition) {\n  for (var _len = arguments.length, messages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    messages[_key - 1] = arguments[_key];\n  }\n\n  if (process.env.NODE_ENV !== \"production\") {\n    useEffect(function () {\n      process.env.NODE_ENV !== \"production\" ? warning.apply(void 0, [condition].concat(messages.map(function (message) {\n        return isRefObject(message) ? message.current : message;\n      }))) : void 0;\n    }, [condition]);\n  }\n}\n\nexport { useWarning };","map":{"version":3,"sources":["/home/priya/Desktop/reactCheckBoxTask/node_modules/reakit-warning/es/useWarning.js"],"names":["warning","useEffect","isObject","isRefObject","ref","useWarning","condition","_len","arguments","length","messages","Array","_key","process","env","NODE_ENV","apply","concat","map","message","current"],"mappings":"AAAA,OAAO,sBAAP;AACA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,uBAAzB;;AAEA,SAASC,WAAT,CAAqBC,GAArB,EAA0B;AACxB,SAAOF,QAAQ,CAACE,GAAD,CAAR,IAAiB,aAAaA,GAArC;AACD;AACD;;;;;;AAMA,SAASC,UAAT,CAAoBC,SAApB,EAA+B;AAC7B,OAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,QAAQ,GAAG,IAAIC,KAAJ,CAAUJ,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAhC,CAAxC,EAA4EK,IAAI,GAAG,CAAxF,EAA2FA,IAAI,GAAGL,IAAlG,EAAwGK,IAAI,EAA5G,EAAgH;AAC9GF,IAAAA,QAAQ,CAACE,IAAI,GAAG,CAAR,CAAR,GAAqBJ,SAAS,CAACI,IAAD,CAA9B;AACD;;AAED,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCd,IAAAA,SAAS,CAAC,YAAY;AACpBY,MAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCf,OAAO,CAACgB,KAAR,CAAc,KAAK,CAAnB,EAAsB,CAACV,SAAD,EAAYW,MAAZ,CAAmBP,QAAQ,CAACQ,GAAT,CAAa,UAAUC,OAAV,EAAmB;AAC/G,eAAOhB,WAAW,CAACgB,OAAD,CAAX,GAAuBA,OAAO,CAACC,OAA/B,GAAyCD,OAAhD;AACD,OAFgF,CAAnB,CAAtB,CAAxC,GAEO,KAAK,CAFZ;AAGD,KAJQ,EAIN,CAACb,SAAD,CAJM,CAAT;AAKD;AACF;;AAED,SAASD,UAAT","sourcesContent":["import 'reakit-utils/flatten';\nimport { warning } from './warning.js';\nimport { useEffect } from 'react';\nimport { isObject } from 'reakit-utils/isObject';\n\nfunction isRefObject(ref) {\n  return isObject(ref) && \"current\" in ref;\n}\n/**\n * Logs `messages` to the console using `console.warn` based on a `condition`.\n * This should be used inside components.\n */\n\n\nfunction useWarning(condition) {\n  for (var _len = arguments.length, messages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    messages[_key - 1] = arguments[_key];\n  }\n\n  if (process.env.NODE_ENV !== \"production\") {\n    useEffect(function () {\n      process.env.NODE_ENV !== \"production\" ? warning.apply(void 0, [condition].concat(messages.map(function (message) {\n        return isRefObject(message) ? message.current : message;\n      }))) : void 0;\n    }, [condition]);\n  }\n}\n\nexport { useWarning };\n"]},"metadata":{},"sourceType":"module"}