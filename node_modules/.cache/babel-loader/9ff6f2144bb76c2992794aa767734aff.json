{"ast":null,"code":"import { useMemo } from 'react'; // https://github.com/mui-org/material-ui/blob/2bcc874cf07b81202968f769cb9c2398c7c11311/packages/material-ui/src/utils/useForkRef.js\n\nfunction setRef(ref, value) {\n  if (value === void 0) {\n    value = null;\n  }\n\n  if (!ref) return;\n\n  if (typeof ref === \"function\") {\n    ref(value);\n  } else {\n    ref.current = value;\n  }\n}\n/**\n * Merges up to two React Refs into a single memoized function React Ref so you\n * can pass it to an element.\n *\n * @example\n * import React from \"react\";\n * import { useForkRef } from \"reakit-utils\";\n *\n * const Component = React.forwardRef((props, ref) => {\n *   const internalRef = React.useRef();\n *   return <div {...props} ref={useForkRef(internalRef, ref)} />;\n * });\n */\n\n\nfunction useForkRef(refA, refB) {\n  return useMemo(function () {\n    if (refA == null && refB == null) {\n      return null;\n    }\n\n    return function (value) {\n      setRef(refA, value);\n      setRef(refB, value);\n    };\n  }, [refA, refB]);\n}\n\nexport { useForkRef };","map":{"version":3,"sources":["/home/priya/Desktop/reactCheckboxTask/React_checkbox_task/node_modules/reakit-utils/es/useForkRef.js"],"names":["useMemo","setRef","ref","value","current","useForkRef","refA","refB"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB,C,CAEA;;AAEA,SAASC,MAAT,CAAgBC,GAAhB,EAAqBC,KAArB,EAA4B;AAC1B,MAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB;AACpBA,IAAAA,KAAK,GAAG,IAAR;AACD;;AAED,MAAI,CAACD,GAAL,EAAU;;AAEV,MAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,IAAAA,GAAG,CAACC,KAAD,CAAH;AACD,GAFD,MAEO;AACLD,IAAAA,GAAG,CAACE,OAAJ,GAAcD,KAAd;AACD;AACF;AACD;;;;;;;;;;;;;;;AAeA,SAASE,UAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgC;AAC9B,SAAOP,OAAO,CAAC,YAAY;AACzB,QAAIM,IAAI,IAAI,IAAR,IAAgBC,IAAI,IAAI,IAA5B,EAAkC;AAChC,aAAO,IAAP;AACD;;AAED,WAAO,UAAUJ,KAAV,EAAiB;AACtBF,MAAAA,MAAM,CAACK,IAAD,EAAOH,KAAP,CAAN;AACAF,MAAAA,MAAM,CAACM,IAAD,EAAOJ,KAAP,CAAN;AACD,KAHD;AAID,GATa,EASX,CAACG,IAAD,EAAOC,IAAP,CATW,CAAd;AAUD;;AAED,SAASF,UAAT","sourcesContent":["import { useMemo } from 'react';\n\n// https://github.com/mui-org/material-ui/blob/2bcc874cf07b81202968f769cb9c2398c7c11311/packages/material-ui/src/utils/useForkRef.js\n\nfunction setRef(ref, value) {\n  if (value === void 0) {\n    value = null;\n  }\n\n  if (!ref) return;\n\n  if (typeof ref === \"function\") {\n    ref(value);\n  } else {\n    ref.current = value;\n  }\n}\n/**\n * Merges up to two React Refs into a single memoized function React Ref so you\n * can pass it to an element.\n *\n * @example\n * import React from \"react\";\n * import { useForkRef } from \"reakit-utils\";\n *\n * const Component = React.forwardRef((props, ref) => {\n *   const internalRef = React.useRef();\n *   return <div {...props} ref={useForkRef(internalRef, ref)} />;\n * });\n */\n\n\nfunction useForkRef(refA, refB) {\n  return useMemo(function () {\n    if (refA == null && refB == null) {\n      return null;\n    }\n\n    return function (value) {\n      setRef(refA, value);\n      setRef(refB, value);\n    };\n  }, [refA, refB]);\n}\n\nexport { useForkRef };\n"]},"metadata":{},"sourceType":"module"}